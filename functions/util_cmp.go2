package functions

// some utility-style functions to improve testing

// cmpInt is an integer wrapper providing a .Equals(cmpInt) function
type cmpInt int

func (c cmpInt) Equals(o cmpInt) bool {
    return int(c) == int(o)
}

func newCmpInts(is []int) ([]cmpInt) {
    cmpints := make([]cmpInt, len(is)) 
    for i,v := range is {
        cmpints[i] = cmpInt(v)
    }
    return cmpints
}


// cmpString is a string wrapper that provides a .equals function
type cmpString string
func (c cmpString) Equals(o cmpString) bool {
    return string(c) == string(o)
}


type comparable(type T) interface {
    Equals(T) bool 
}

// equalsOrdered returns true if all elements in the slice are equal, and in the same order.
func equalsOrdered(type T comparable) (ts1, ts2 []T) bool {
    if len(ts1) != len(ts2) {
        return false
    }

    for i,t := range ts1 {
        if !ts2[i].Equals(t) {
            return false
        }
    }
    return true
}
